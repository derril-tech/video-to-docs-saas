version: '3.8'

services:
  # Database
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: voice_to_docs
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/api/src/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NATS
  nats:
    image: nats:2.10-alpine
    ports:
      - "4222:4222"
      - "8222:8222"
    command: -js -m 8222
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_NAME: voice_to_docs
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: nats://nats:4222
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./apps/api:/app
      - /app/node_modules

  # Frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
    depends_on:
      - api
    volumes:
      - ./apps/web:/app
      - /app/node_modules

  # ASR Worker
  asr-worker:
    build:
      context: ./workers/asr-worker
      dockerfile: Dockerfile.dev
    ports:
      - "8001:8001"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: nats://nats:4222
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./workers/asr-worker:/app
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Punctuation Worker
  punct-worker:
    build:
      context: ./workers/punct-worker
      dockerfile: Dockerfile.dev
    ports:
      - "8002:8002"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: nats://nats:4222
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./workers/punct-worker:/app

  # Command Worker
  cmd-worker:
    build:
      context: ./workers/cmd-worker
      dockerfile: Dockerfile.dev
    ports:
      - "8003:8003"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: nats://nats:4222
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./workers/cmd-worker:/app

  # NER Worker
  ner-worker:
    build:
      context: ./workers/ner-worker
      dockerfile: Dockerfile.dev
    ports:
      - "8004:8004"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: nats://nats:4222
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./workers/ner-worker:/app

  # Format Worker
  format-worker:
    build:
      context: ./workers/format-worker
      dockerfile: Dockerfile.dev
    ports:
      - "8005:8005"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: nats://nats:4222
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./workers/format-worker:/app

  # Template Worker
  template-worker:
    build:
      context: ./workers/template-worker
      dockerfile: Dockerfile.dev
    ports:
      - "8006:8006"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: nats://nats:4222
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./workers/template-worker:/app

  # Export Worker
  export-worker:
    build:
      context: ./workers/export-worker
      dockerfile: Dockerfile.dev
    ports:
      - "8007:8007"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: nats://nats:4222
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./workers/export-worker:/app

  # Sync Worker
  sync-worker:
    build:
      context: ./workers/sync-worker
      dockerfile: Dockerfile.dev
    ports:
      - "8008:8008"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: nats://nats:4222
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./workers/sync-worker:/app

  # Probe Worker
  probe-worker:
    build:
      context: ./workers/probe-worker
      dockerfile: Dockerfile.dev
    ports:
      - "8009:8009"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: nats://nats:4222
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./workers/probe-worker:/app

  # Moderation Worker
  moderation-worker:
    build:
      context: ./workers/moderation-worker
      dockerfile: Dockerfile.dev
    ports:
      - "8010:8010"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NATS_URL: nats://nats:4222
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ./workers/moderation-worker:/app

volumes:
  postgres_data:
  redis_data:
  minio_data:
